===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
Table    Non_unique    Key_name    Seq_in_index    Column_name    Collation    Cardinality    Sub_part    Packed    Null    Index_type    Func    Comment    
t1     1     i     1     null     A     0     null     null     YES     BTREE      lpad([t1].[a], 10, _iso88591'X' collate iso88591_bin)     null     

Query stmt:
show index from  t? t?
===================================================
0
===================================================
0
===================================================
0
===================================================
a    

Query plan:
sscan
    class: t? node[?]
    sargs: term[?]
    cost:  ? card ?
Query stmt:
select t?.a from t? t? where  cast(t?.a as char(?))= cast(_euckr'a' as char(-?))
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
View    Create View    
v     select [t1].[a] from [t1] [t1] where [t1].[a]=_iso88591'a' collate iso88591_bin     

Query plan:
sscan
    class: DUMMY node[?]
    sargs: term[?]
    cost:  ? card ?
Query stmt:
(select count(*) from t? DUMMY where (DUMMY.a= ?:? ))
Query plan:
sscan
    class: DUMMY node[?]
    cost:  ? card ?
Query stmt:
(select DUMMY.a_? from (select count(*) from t? DUMMY where (DUMMY.a= ?:? )) DUMMY (a_?))
Query plan:
follow
    edge:  t node[?] g -> db_user node[?]
    head:  nl-join (inner join)
              edge:  table(?) -> t node[?]
              outer: iscan
                         class: u node[?]
                         index: u_db_user_name term[?]
                         cost:  ? card ?
              inner: sscan
                         class: t node[?]
                         sargs: table(?) -> t node[?]
                         cost:  ? card ?
              cost:  ? card ?
    cost:  ? card ?
Query stmt:
(select set{ CURRENT_USER }+coalesce(sum(set{t.g.[name]}), set{}) from db_user u, table(u.[groups]) t (g) where u.[name]= CURRENT_USER )
Query plan:
follow
    edge:  t node[?] g -> db_user node[?]
    head:  nl-join (inner join)
              edge:  table(?) -> t node[?]
              outer: iscan
                         class: u node[?]
                         index: u_db_user_name term[?]
                         cost:  ? card ?
              inner: sscan
                         class: t node[?]
                         sargs: table(?) -> t node[?]
                         cost:  ? card ?
              cost:  ? card ?
    cost:  ? card ?
Query stmt:
(select set{ CURRENT_USER }+coalesce(sum(set{t.g.[name]}), set{}) from db_user u, table(u.[groups]) t (g) where u.[name]= CURRENT_USER )
Query plan:
follow
    edge:  au node[?] grantee -> db_user node[?]
    head:  sscan
              class: au node[?]
              sargs: term[?]
              cost:  ? card ?
    sargs: term[?]
    cost:  ? card ?
Query stmt:
(select sum(set{au.class_of}) from [_db_auth] au where {[name]} subseteq (select set{ CURRENT_USER }+coalesce(sum(set{t.g.[name]}), set{}) from db_user u, table(u.[groups]) t (g) where u.[name]= CURRENT_USER ) and au.auth_type= ?:? )
Query plan:
follow
    edge:  _db_class node[?] owner -> db_user node[?]
    head:  idx-join (inner join)
              outer: nl-join (cross join)
                         outer: iscan
                                    class: c node[?]
                                    index: i__db_class_class_name term[?]
                                    cost:  ? card ?
                         inner: iscan
                                    class: _db_class node[?]
                                    index: i__db_class_class_name term[?]
                                    cost:  ? card ?
                         cost:  ? card ?
              inner: iscan
                         class: VC node[?]
                         index: i__db_query_spec_class_of VC node[?] class_of -> _db_class node[?]
                         cost:  ? card ?
              cost:  ? card ?
    sargs: term[?]
    cost:  ? card ?
Query stmt:
select  if(VC.class_of.class_name='',  cast((select DUMMY.a_? from (select count(*) from t? DUMMY where (DUMMY.a= ?:? )) DUMMY (a_?)) as varchar), VC.class_of.class_name),  if(c.[comment] is null  or c.[comment]='', VC.spec, VC.spec, ' comment=''', c.[comment], '''') from [_db_query_spec] VC, [_db_class] c where ( CURRENT_USER ='DBA' or {VC.class_of.[owner].[name]} subseteq (select set{ CURRENT_USER }+coalesce(sum(set{t.g.[name]}), set{}) from db_user u, table(u.[groups]) t (g) where u.[name]= CURRENT_USER ) or {VC.class_of} subseteq (select sum(set{au.class_of}) from [_db_auth] au where {[name]} subseteq (select set{ CURRENT_USER }+coalesce(sum(set{t.g.[name]}), set{}) from db_user u, table(u.[groups]) t (g) where u.[name]= CURRENT_USER ) and au.auth_type= ?:? )) and (c.class_name= ?:? ) and (VC.class_of.class_name= ?:? ) and (VC.class_of.class_name=c.class_name)
===================================================
0
===================================================
0
===================================================
0
